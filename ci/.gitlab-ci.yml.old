image: docker:18.09.7
variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  IMAGE_NAME: emcmongoose/mongoose-base
  IMAGE_FILE_NAME: build/mongoose-base.tar
  JAVA_HOME: /opt/jdk-11.0.2+9
  ROBOTEST_CONTAINER_WORKING_DIR: /root/mongoose
  SERVICE_HOST: docker # should be used instead of the "localhost"/"127.0.0.1" in GL CI

services:
  - docker:18.09.7-dind

stages:
  - build
  - test # unit/integration tests
  - build_docker_image
  - test_functional # functional containerized tests
  - deploy

before_script:
  - apk --update add --no-cache ca-certificates curl openssl binutils xz gnupg
  - curl -Lks https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.2%2B9/OpenJDK11U-jdk_x64_linux_hotspot_11.0.2_9.tar.gz -o /tmp/jdk11.tgz
  - tar xvf /tmp/jdk11.tgz -C /opt
  - rm -rf /tmp/jdk11.tgz
  - export PATH=${PATH}:${JAVA_HOME}/bin
  - export GLIBC_VER="2.28-r0"
  - export ALPINE_GLIBC_REPO="https://github.com/sgerrand/alpine-pkg-glibc/releases/download"
  - export GCC_LIBS_URL="https://archive.archlinux.org/packages/g/gcc-libs/gcc-libs-8.3.0-1-x86_64.pkg.tar.xz"
  - export GCC_LIBS_SHA256=400e2ecb1b2dfb40e09cdb6805f0075cbc88e6fcef9b73f23c64a6e709dcd61b
  - export ZLIB_URL="https://archive.archlinux.org/packages/z/zlib/zlib-1%3A1.2.11-3-x86_64.pkg.tar.xz"
  - export ZLIB_SHA256=17aede0b9f8baa789c5aa3f358fbf8c68a5f1228c5e6cba1a5dd34102ef4d4e5
  - curl -Lks https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub
  - curl -Lks ${ALPINE_GLIBC_REPO}/${GLIBC_VER}/glibc-${GLIBC_VER}.apk > /tmp/${GLIBC_VER}.apk
  - apk add --allow-untrusted /tmp/${GLIBC_VER}.apk
  - curl -Lks ${GCC_LIBS_URL} -o /tmp/gcc-libs.tar.xz
  - echo "${GCC_LIBS_SHA256}  /tmp/gcc-libs.tar.xz" | sha256sum -c -
  - mkdir /tmp/gcc
  - tar -xf /tmp/gcc-libs.tar.xz -C /tmp/gcc
  - mv /tmp/gcc/usr/lib/libgcc* /tmp/gcc/usr/lib/libstdc++* /usr/glibc-compat/lib
  - strip /usr/glibc-compat/lib/libgcc_s.so.* /usr/glibc-compat/lib/libstdc++.so*
  - curl -Lks ${ZLIB_URL} -o /tmp/libz.tar.xz
  - echo "${ZLIB_SHA256}  /tmp/libz.tar.xz" | sha256sum -c -
  - mkdir /tmp/libz
  - tar -xf /tmp/libz.tar.xz -C /tmp/libz
  - mv /tmp/libz/usr/lib/libz.so* /usr/glibc-compat/lib
  - apk del binutils
  - rm -rf /tmp/${GLIBC_VER}.apk /tmp/gcc /tmp/gcc-libs.tar.xz /tmp/libz /tmp/libz.tar.xz /var/cache/apk/*

build:
  stage: build
  script:
    - ./gradlew clean jar
  artifacts:
    paths:
      - build/libs/mongoose-*.jar

test_unit:
  stage: test
  script:
    - ./gradlew test

test_integration:
  stage: test
  script:
    - ./gradlew integrationTest
  artifacts:
    paths:
      - build/reports/tests/integrationTest/*
    when: on_failure

build_docker_image:
  stage: build_docker_image
  script:
    - docker build -f ci/docker/Dockerfile -t ${IMAGE_NAME}:${CI_COMMIT_SHA} .
    - docker save ${IMAGE_NAME}:${CI_COMMIT_SHA} > ${IMAGE_FILE_NAME}
  artifacts:
    paths:
      - ${IMAGE_FILE_NAME}

.test_robot:
  stage: test_functional
  variables:
    HOST_WORKING_DIR: ${CI_PROJECT_DIR}
    MONGOOSE_IMAGE_VERSION: ${CI_COMMIT_SHA}
    PYTHONPATH: ${PYTHONPATH}:/usr/lib/python3.8/site-packages:src/test/robot/lib
  before_script:
    # since 20.0.26 version virtualenv uses distlib 0.3.1 instead of 0.3.0. If apk --update is done first then
    # issue rises with 3.0.0 not being able to upgrade to 3.0.1. So we ignore 0.3.0
    - apk add --no-cache --update python3 py-pip
    - pip install -U virtualenv #==20.8.0 #--ignore-installed distlib
    - pip install -U requests==2.26.0 #--ignore-installed urllib3
    - pip install -U robotframework==4.1.1
    - pip install -U robotframework-requests==0.9.2
    - pip install -U robotframework-csvlib==1.0.2
  script:
    - export MONGOOSE_VERSION=$(cat src/main/resources/config/defaults.yaml | grep version | sed -n 's/.*\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')
    - export MONGOOSE_IMAGE_VERSION=${CI_COMMIT_SHA}
    - docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
    - docker load < ${IMAGE_FILE_NAME}
    - robot --outputdir build/robotest --suite ${SUITE} --include ${TEST} src/test/robot
  after_script:
    - rebot build/robotest/output.xml
  artifacts:
    paths:
      - build/robotest/*.html
    when: on_failure

test_api_remote_logs:
  extends: .test_robot
  variables:
    SUITE: api.remote
    TEST: logs

test_api_remote_config:
  extends: .test_robot
  variables:
    SUITE: api.remote
    TEST: config

test_api_remote_run:
  extends: .test_robot
  variables:
    SUITE: api.remote
    TEST: run

test_system_limitations:
  extends: .test_robot
  variables:
    SUITE: system
    TEST: limitations

release_to_maven_repo:
  stage: deploy
  script:
    - if [ ! -z "$GPG_SECRET_KEYS" ]; then echo $GPG_SECRET_KEYS | base64 -d | gpg --import --batch; fi
    - if [ ! -z "$GPG_OWNERTRUST" ]; then echo $GPG_OWNERTRUST | base64 -d | gpg --import-ownertrust --batch; fi
    - mkdir /tmp/.gnupg
    - if [ ! -z "$GPG_SECRING" ]; then echo $GPG_SECRING | base64 -d > /tmp/.gnupg/secring.gpg; fi
    - ./gradlew -Psigning.keyId=${SIGNING_KEY_ID} -Psigning.password=${SIGNING_PASSWORD} -Psigning.secretKeyRingFile=/tmp/.gnupg/secring.gpg -PossrhUsername=${OSSRH_USERNAME} -PossrhPassword=${OSSRH_PASSWORD} publishToNexus closeAndReleaseRepository
  only:
    - latest
  except:
    - branches

release_to_docker_hub:
  stage: deploy
  script:
    - export MONGOOSE_VERSION=$(cat src/main/resources/config/defaults.yaml | grep version | sed -n 's/.*\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')
    - docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
    - docker load < ${IMAGE_FILE_NAME}
    - docker tag ${IMAGE_NAME}:${CI_COMMIT_SHA} ${IMAGE_NAME}:${MONGOOSE_VERSION}
    - docker push ${IMAGE_NAME}:${MONGOOSE_VERSION}
    - docker tag ${IMAGE_NAME}:${CI_COMMIT_SHA} ${IMAGE_NAME}:latest
    - docker push ${IMAGE_NAME}:latest
  only:
    - latest
  except:
    - branches
